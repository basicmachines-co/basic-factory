"""Handlers for GitHub webhook events."""
from typing import List
from dataclasses import dataclass
from basic_factory.claude import Claude
from basic_factory.github import GitHub

@dataclass
class ReviewComment:
    """Code review comment with location info."""
    path: str
    line: int
    body: str

@dataclass
class Review:
    """Complete code review."""
    body: str
    comments: List[ReviewComment]
    approve: bool

async def handle_pr_opened(gh: GitHub, claude: Claude, repo: str, pr_number: int) -> None:
    """Handle PR opened event by triggering Claude review."""
    # Get PR details
    pr = await gh.get_pr(repo, pr_number)
    diff = await gh.get_pr_diff(repo, pr_number)

    # Get Claude's review
    review = await claude.review_changes(
        diff=diff,
        description=pr.title + "\n\n" + (pr.body or "")
    )

    # Format review for GitHub
    comments = []
    if "hello.py" in diff:
        # Example: Add specific comments for hello world
        comments.append(
            ReviewComment(
                path="src/basic_factory/hello.py",
                line=1,
                body="Consider adding more details to the module docstring about usage."
            )
        )

    formatted_review = Review(
        body=f"""### Code Review Summary
{review.summary}

### Suggestions
{"".join(f"- {s}\n" for s in review.suggestions)}

---
_This review was generated by Claude via basic-factory_""",
        comments=comments,
        approve=review.approval
    )

    # Submit review to GitHub
    await gh.submit_review(repo, pr_number, formatted_review)